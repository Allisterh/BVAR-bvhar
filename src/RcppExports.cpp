// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// build_y0
Eigen::MatrixXd build_y0(Eigen::MatrixXd y, int var_lag, int index);
RcppExport SEXP _bvhar_build_y0(SEXP ySEXP, SEXP var_lagSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type var_lag(var_lagSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(build_y0(y, var_lag, index));
    return rcpp_result_gen;
END_RCPP
}
// build_design
Eigen::MatrixXd build_design(Eigen::MatrixXd y, int var_lag);
RcppExport SEXP _bvhar_build_design(SEXP ySEXP, SEXP var_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type var_lag(var_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(build_design(y, var_lag));
    return rcpp_result_gen;
END_RCPP
}
// diag_misc
Eigen::MatrixXd diag_misc(Eigen::VectorXd x);
RcppExport SEXP _bvhar_diag_misc(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(diag_misc(x));
    return rcpp_result_gen;
END_RCPP
}
// build_ydummy
Eigen::MatrixXd build_ydummy(int p, Eigen::VectorXd sigma, double lambda, Eigen::VectorXd daily, Eigen::VectorXd weekly, Eigen::VectorXd monthly);
RcppExport SEXP _bvhar_build_ydummy(SEXP pSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP dailySEXP, SEXP weeklySEXP, SEXP monthlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type daily(dailySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weekly(weeklySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type monthly(monthlySEXP);
    rcpp_result_gen = Rcpp::wrap(build_ydummy(p, sigma, lambda, daily, weekly, monthly));
    return rcpp_result_gen;
END_RCPP
}
// build_xdummy
Eigen::MatrixXd build_xdummy(Eigen::VectorXd lag_seq, double lambda, Eigen::VectorXd sigma, double eps);
RcppExport SEXP _bvhar_build_xdummy(SEXP lag_seqSEXP, SEXP lambdaSEXP, SEXP sigmaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lag_seq(lag_seqSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_xdummy(lag_seq, lambda, sigma, eps));
    return rcpp_result_gen;
END_RCPP
}
// minnesota_prior
Rcpp::List minnesota_prior(Eigen::MatrixXd x_dummy, Eigen::MatrixXd y_dummy);
RcppExport SEXP _bvhar_minnesota_prior(SEXP x_dummySEXP, SEXP y_dummySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x_dummy(x_dummySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_dummy(y_dummySEXP);
    rcpp_result_gen = Rcpp::wrap(minnesota_prior(x_dummy, y_dummy));
    return rcpp_result_gen;
END_RCPP
}
// estimate_bvar_mn
Rcpp::List estimate_bvar_mn(Eigen::MatrixXd x, Eigen::MatrixXd y, Eigen::MatrixXd x_dummy, Eigen::MatrixXd y_dummy);
RcppExport SEXP _bvhar_estimate_bvar_mn(SEXP xSEXP, SEXP ySEXP, SEXP x_dummySEXP, SEXP y_dummySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x_dummy(x_dummySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_dummy(y_dummySEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_bvar_mn(x, y, x_dummy, y_dummy));
    return rcpp_result_gen;
END_RCPP
}
// estimate_mn_flat
Rcpp::List estimate_mn_flat(Eigen::MatrixXd x, Eigen::MatrixXd y, Eigen::MatrixXd U);
RcppExport SEXP _bvhar_estimate_mn_flat(SEXP xSEXP, SEXP ySEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_mn_flat(x, y, U));
    return rcpp_result_gen;
END_RCPP
}
// ssvs_coef_prop
Eigen::MatrixXd ssvs_coef_prop(Eigen::VectorXd coef_spike, Eigen::VectorXd coef_slab, Eigen::VectorXd prop_sparse);
RcppExport SEXP _bvhar_ssvs_coef_prop(SEXP coef_spikeSEXP, SEXP coef_slabSEXP, SEXP prop_sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_spike(coef_spikeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_slab(coef_slabSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type prop_sparse(prop_sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvs_coef_prop(coef_spike, coef_slab, prop_sparse));
    return rcpp_result_gen;
END_RCPP
}
// ssvs_coef
Eigen::VectorXd ssvs_coef(Eigen::MatrixXd XtX, Eigen::VectorXd coef_lse, Eigen::MatrixXd chol_factor, Eigen::MatrixXd diag_sparse);
RcppExport SEXP _bvhar_ssvs_coef(SEXP XtXSEXP, SEXP coef_lseSEXP, SEXP chol_factorSEXP, SEXP diag_sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_lse(coef_lseSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type chol_factor(chol_factorSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diag_sparse(diag_sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvs_coef(XtX, coef_lse, chol_factor, diag_sparse));
    return rcpp_result_gen;
END_RCPP
}
// ssvs_coef_latent
Eigen::VectorXd ssvs_coef_latent(Eigen::VectorXd coef_vec, Eigen::VectorXd coef_spike, Eigen::VectorXd coef_slab, Eigen::VectorXd coef_sparse);
RcppExport SEXP _bvhar_ssvs_coef_latent(SEXP coef_vecSEXP, SEXP coef_spikeSEXP, SEXP coef_slabSEXP, SEXP coef_sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_vec(coef_vecSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_spike(coef_spikeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_slab(coef_slabSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_sparse(coef_sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvs_coef_latent(coef_vec, coef_spike, coef_slab, coef_sparse));
    return rcpp_result_gen;
END_RCPP
}
// ssvs_cov_prop
Eigen::MatrixXd ssvs_cov_prop(int col_index, Eigen::VectorXd cov_spike, Eigen::VectorXd cov_slab, Eigen::VectorXd prop_sparse);
RcppExport SEXP _bvhar_ssvs_cov_prop(SEXP col_indexSEXP, SEXP cov_spikeSEXP, SEXP cov_slabSEXP, SEXP prop_sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type col_index(col_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_spike(cov_spikeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_slab(cov_slabSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type prop_sparse(prop_sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvs_cov_prop(col_index, cov_spike, cov_slab, prop_sparse));
    return rcpp_result_gen;
END_RCPP
}
// ssvs_cov_diag
double ssvs_cov_diag(int col_index, Eigen::MatrixXd ZtZ, Eigen::MatrixXd diag_sparse, Eigen::VectorXd cov_shape, Eigen::VectorXd cov_rate);
RcppExport SEXP _bvhar_ssvs_cov_diag(SEXP col_indexSEXP, SEXP ZtZSEXP, SEXP diag_sparseSEXP, SEXP cov_shapeSEXP, SEXP cov_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type col_index(col_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZtZ(ZtZSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diag_sparse(diag_sparseSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_shape(cov_shapeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_rate(cov_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvs_cov_diag(col_index, ZtZ, diag_sparse, cov_shape, cov_rate));
    return rcpp_result_gen;
END_RCPP
}
// ssvs_cov_off
Eigen::VectorXd ssvs_cov_off(int col_index, Eigen::MatrixXd ZtZ, Eigen::MatrixXd chol_factor, Eigen::MatrixXd diag_sparse);
RcppExport SEXP _bvhar_ssvs_cov_off(SEXP col_indexSEXP, SEXP ZtZSEXP, SEXP chol_factorSEXP, SEXP diag_sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type col_index(col_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ZtZ(ZtZSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type chol_factor(chol_factorSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diag_sparse(diag_sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvs_cov_off(col_index, ZtZ, chol_factor, diag_sparse));
    return rcpp_result_gen;
END_RCPP
}
// build_symmat
Eigen::MatrixXd build_symmat(Eigen::VectorXd diag_vec, Eigen::VectorXd off_diagvec);
RcppExport SEXP _bvhar_build_symmat(SEXP diag_vecSEXP, SEXP off_diagvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type diag_vec(diag_vecSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type off_diagvec(off_diagvecSEXP);
    rcpp_result_gen = Rcpp::wrap(build_symmat(diag_vec, off_diagvec));
    return rcpp_result_gen;
END_RCPP
}
// ssvs_cov_latent
Eigen::VectorXd ssvs_cov_latent(Eigen::MatrixXd chol_factor, Eigen::VectorXd cov_spike, Eigen::VectorXd cov_slab, Eigen::VectorXd cov_sparse);
RcppExport SEXP _bvhar_ssvs_cov_latent(SEXP chol_factorSEXP, SEXP cov_spikeSEXP, SEXP cov_slabSEXP, SEXP cov_sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type chol_factor(chol_factorSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_spike(cov_spikeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_slab(cov_slabSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_sparse(cov_sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvs_cov_latent(chol_factor, cov_spike, cov_slab, cov_sparse));
    return rcpp_result_gen;
END_RCPP
}
// estimate_bvar_ssvs
Rcpp::List estimate_bvar_ssvs(int num_iter, Eigen::MatrixXd x, Eigen::MatrixXd y, Eigen::MatrixXd init_coef, Eigen::VectorXd init_coef_sparse, Eigen::Map<Eigen::MatrixXd> init_cov, Eigen::VectorXd init_cov_sparse, Eigen::VectorXd coef_spike, Eigen::VectorXd coef_slab, Eigen::VectorXd coef_prop, Eigen::VectorXd cov_shape, Eigen::VectorXd cov_rate, Eigen::VectorXd cov_spike, Eigen::VectorXd cov_slab, Eigen::VectorXd cov_prop);
RcppExport SEXP _bvhar_estimate_bvar_ssvs(SEXP num_iterSEXP, SEXP xSEXP, SEXP ySEXP, SEXP init_coefSEXP, SEXP init_coef_sparseSEXP, SEXP init_covSEXP, SEXP init_cov_sparseSEXP, SEXP coef_spikeSEXP, SEXP coef_slabSEXP, SEXP coef_propSEXP, SEXP cov_shapeSEXP, SEXP cov_rateSEXP, SEXP cov_spikeSEXP, SEXP cov_slabSEXP, SEXP cov_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type init_coef(init_coefSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type init_coef_sparse(init_coef_sparseSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type init_cov(init_covSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type init_cov_sparse(init_cov_sparseSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_spike(coef_spikeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_slab(coef_slabSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type coef_prop(coef_propSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_shape(cov_shapeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_rate(cov_rateSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_spike(cov_spikeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_slab(cov_slabSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cov_prop(cov_propSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_bvar_ssvs(num_iter, x, y, init_coef, init_coef_sparse, init_cov, init_cov_sparse, coef_spike, coef_slab, coef_prop, cov_shape, cov_rate, cov_spike, cov_slab, cov_prop));
    return rcpp_result_gen;
END_RCPP
}
// estimate_var
Rcpp::List estimate_var(Eigen::MatrixXd x, Eigen::MatrixXd y);
RcppExport SEXP _bvhar_estimate_var(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_var(x, y));
    return rcpp_result_gen;
END_RCPP
}
// compute_cov
Eigen::MatrixXd compute_cov(Eigen::MatrixXd z, int num_design, int dim_design);
RcppExport SEXP _bvhar_compute_cov(SEXP zSEXP, SEXP num_designSEXP, SEXP dim_designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type num_design(num_designSEXP);
    Rcpp::traits::input_parameter< int >::type dim_design(dim_designSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cov(z, num_design, dim_design));
    return rcpp_result_gen;
END_RCPP
}
// VARcoeftoVMA
Eigen::MatrixXd VARcoeftoVMA(Eigen::MatrixXd var_coef, int var_lag, int lag_max);
RcppExport SEXP _bvhar_VARcoeftoVMA(SEXP var_coefSEXP, SEXP var_lagSEXP, SEXP lag_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type var_coef(var_coefSEXP);
    Rcpp::traits::input_parameter< int >::type var_lag(var_lagSEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(VARcoeftoVMA(var_coef, var_lag, lag_max));
    return rcpp_result_gen;
END_RCPP
}
// VARtoVMA
Eigen::MatrixXd VARtoVMA(Rcpp::List object, int lag_max);
RcppExport SEXP _bvhar_VARtoVMA(SEXP objectSEXP, SEXP lag_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(VARtoVMA(object, lag_max));
    return rcpp_result_gen;
END_RCPP
}
// compute_covmse
Eigen::MatrixXd compute_covmse(Rcpp::List object, int step);
RcppExport SEXP _bvhar_compute_covmse(SEXP objectSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_covmse(object, step));
    return rcpp_result_gen;
END_RCPP
}
// scale_har
Eigen::MatrixXd scale_har(int dim, int week, int month);
RcppExport SEXP _bvhar_scale_har(SEXP dimSEXP, SEXP weekSEXP, SEXP monthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type week(weekSEXP);
    Rcpp::traits::input_parameter< int >::type month(monthSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_har(dim, week, month));
    return rcpp_result_gen;
END_RCPP
}
// estimate_har
Rcpp::List estimate_har(Eigen::MatrixXd x, Eigen::MatrixXd y);
RcppExport SEXP _bvhar_estimate_har(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_har(x, y));
    return rcpp_result_gen;
END_RCPP
}
// estimate_har_none
Rcpp::List estimate_har_none(Eigen::MatrixXd x, Eigen::MatrixXd y);
RcppExport SEXP _bvhar_estimate_har_none(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_har_none(x, y));
    return rcpp_result_gen;
END_RCPP
}
// VHARcoeftoVMA
Eigen::MatrixXd VHARcoeftoVMA(Eigen::MatrixXd vhar_coef, Eigen::MatrixXd HARtrans_mat, int lag_max);
RcppExport SEXP _bvhar_VHARcoeftoVMA(SEXP vhar_coefSEXP, SEXP HARtrans_matSEXP, SEXP lag_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type vhar_coef(vhar_coefSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type HARtrans_mat(HARtrans_matSEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(VHARcoeftoVMA(vhar_coef, HARtrans_mat, lag_max));
    return rcpp_result_gen;
END_RCPP
}
// VHARtoVMA
Eigen::MatrixXd VHARtoVMA(Rcpp::List object, int lag_max);
RcppExport SEXP _bvhar_VHARtoVMA(SEXP objectSEXP, SEXP lag_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(VHARtoVMA(object, lag_max));
    return rcpp_result_gen;
END_RCPP
}
// compute_covmse_har
Eigen::MatrixXd compute_covmse_har(Rcpp::List object, int step);
RcppExport SEXP _bvhar_compute_covmse_har(SEXP objectSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_covmse_har(object, step));
    return rcpp_result_gen;
END_RCPP
}
// forecast_bvar
Rcpp::List forecast_bvar(Rcpp::List object, int step, int num_sim);
RcppExport SEXP _bvhar_forecast_bvar(SEXP objectSEXP, SEXP stepSEXP, SEXP num_simSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type num_sim(num_simSEXP);
    rcpp_result_gen = Rcpp::wrap(forecast_bvar(object, step, num_sim));
    return rcpp_result_gen;
END_RCPP
}
// forecast_bvharmn
Rcpp::List forecast_bvharmn(Rcpp::List object, int step, int num_sim);
RcppExport SEXP _bvhar_forecast_bvharmn(SEXP objectSEXP, SEXP stepSEXP, SEXP num_simSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type num_sim(num_simSEXP);
    rcpp_result_gen = Rcpp::wrap(forecast_bvharmn(object, step, num_sim));
    return rcpp_result_gen;
END_RCPP
}
// expand_var
Eigen::MatrixXd expand_var(Eigen::MatrixXd y, int lag, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_expand_var(SEXP ySEXP, SEXP lagSEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_var(y, lag, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// expand_vhar
Eigen::MatrixXd expand_vhar(Eigen::MatrixXd y, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_expand_vhar(SEXP ySEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_vhar(y, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// expand_bvar
Eigen::MatrixXd expand_bvar(Eigen::MatrixXd y, int lag, Rcpp::List bayes_spec, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_expand_bvar(SEXP ySEXP, SEXP lagSEXP, SEXP bayes_specSEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bayes_spec(bayes_specSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_bvar(y, lag, bayes_spec, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// expand_bvarflat
Eigen::MatrixXd expand_bvarflat(Eigen::MatrixXd y, int lag, Rcpp::List bayes_spec, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_expand_bvarflat(SEXP ySEXP, SEXP lagSEXP, SEXP bayes_specSEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bayes_spec(bayes_specSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_bvarflat(y, lag, bayes_spec, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// expand_bvhar
Eigen::MatrixXd expand_bvhar(Eigen::MatrixXd y, Rcpp::List bayes_spec, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_expand_bvhar(SEXP ySEXP, SEXP bayes_specSEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bayes_spec(bayes_specSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_bvhar(y, bayes_spec, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// roll_var
Eigen::MatrixXd roll_var(Eigen::MatrixXd y, int lag, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_roll_var(SEXP ySEXP, SEXP lagSEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var(y, lag, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// roll_vhar
Eigen::MatrixXd roll_vhar(Eigen::MatrixXd y, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_roll_vhar(SEXP ySEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_vhar(y, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// roll_bvar
Eigen::MatrixXd roll_bvar(Eigen::MatrixXd y, int lag, Rcpp::List bayes_spec, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_roll_bvar(SEXP ySEXP, SEXP lagSEXP, SEXP bayes_specSEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bayes_spec(bayes_specSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_bvar(y, lag, bayes_spec, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// roll_bvarflat
Eigen::MatrixXd roll_bvarflat(Eigen::MatrixXd y, int lag, Rcpp::List bayes_spec, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_roll_bvarflat(SEXP ySEXP, SEXP lagSEXP, SEXP bayes_specSEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bayes_spec(bayes_specSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_bvarflat(y, lag, bayes_spec, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// roll_bvhar
Eigen::MatrixXd roll_bvhar(Eigen::MatrixXd y, Rcpp::List bayes_spec, bool include_mean, int step, Eigen::MatrixXd y_test);
RcppExport SEXP _bvhar_roll_bvhar(SEXP ySEXP, SEXP bayes_specSEXP, SEXP include_meanSEXP, SEXP stepSEXP, SEXP y_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bayes_spec(bayes_specSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y_test(y_testSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_bvhar(y, bayes_spec, include_mean, step, y_test));
    return rcpp_result_gen;
END_RCPP
}
// forecast_var
Eigen::MatrixXd forecast_var(Rcpp::List object, int step);
RcppExport SEXP _bvhar_forecast_var(SEXP objectSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(forecast_var(object, step));
    return rcpp_result_gen;
END_RCPP
}
// forecast_vhar
Eigen::MatrixXd forecast_vhar(Rcpp::List object, int step);
RcppExport SEXP _bvhar_forecast_vhar(SEXP objectSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< int >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(forecast_vhar(object, step));
    return rcpp_result_gen;
END_RCPP
}
// sim_mgaussian
Eigen::MatrixXd sim_mgaussian(int num_sim, Eigen::VectorXd mu, Eigen::MatrixXd sig);
RcppExport SEXP _bvhar_sim_mgaussian(SEXP num_simSEXP, SEXP muSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_sim(num_simSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_mgaussian(num_sim, mu, sig));
    return rcpp_result_gen;
END_RCPP
}
// sim_matgaussian
Eigen::MatrixXd sim_matgaussian(Eigen::MatrixXd mat_mean, Eigen::Map<Eigen::MatrixXd> mat_scale_u, Eigen::Map<Eigen::MatrixXd> mat_scale_v);
RcppExport SEXP _bvhar_sim_matgaussian(SEXP mat_meanSEXP, SEXP mat_scale_uSEXP, SEXP mat_scale_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mat_mean(mat_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type mat_scale_u(mat_scale_uSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type mat_scale_v(mat_scale_vSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_matgaussian(mat_mean, mat_scale_u, mat_scale_v));
    return rcpp_result_gen;
END_RCPP
}
// sim_iw_tri
Eigen::MatrixXd sim_iw_tri(Eigen::Map<Eigen::MatrixXd> mat_scale, double shape);
RcppExport SEXP _bvhar_sim_iw_tri(SEXP mat_scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type mat_scale(mat_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_iw_tri(mat_scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// sim_iw
Eigen::MatrixXd sim_iw(Eigen::Map<Eigen::MatrixXd> mat_scale, double shape);
RcppExport SEXP _bvhar_sim_iw(SEXP mat_scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type mat_scale(mat_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_iw(mat_scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// sim_mniw
Rcpp::List sim_mniw(int num_sim, Eigen::MatrixXd mat_mean, Eigen::Map<Eigen::MatrixXd> mat_scale_u, Eigen::Map<Eigen::MatrixXd> mat_scale, double shape);
RcppExport SEXP _bvhar_sim_mniw(SEXP num_simSEXP, SEXP mat_meanSEXP, SEXP mat_scale_uSEXP, SEXP mat_scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_sim(num_simSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mat_mean(mat_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type mat_scale_u(mat_scale_uSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type mat_scale(mat_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_mniw(num_sim, mat_mean, mat_scale_u, mat_scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// compute_stablemat
Eigen::MatrixXd compute_stablemat(Eigen::MatrixXd x);
RcppExport SEXP _bvhar_compute_stablemat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_stablemat(x));
    return rcpp_result_gen;
END_RCPP
}
// compute_var_stablemat
Eigen::MatrixXd compute_var_stablemat(Rcpp::List object);
RcppExport SEXP _bvhar_compute_var_stablemat(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_var_stablemat(object));
    return rcpp_result_gen;
END_RCPP
}
// compute_vhar_stablemat
Eigen::MatrixXd compute_vhar_stablemat(Rcpp::List object);
RcppExport SEXP _bvhar_compute_vhar_stablemat(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_vhar_stablemat(object));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_eigen
Eigen::MatrixXd kronecker_eigen(Eigen::MatrixXd x, Eigen::MatrixXd y);
RcppExport SEXP _bvhar_kronecker_eigen(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_eigen(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vectorize_eigen
Eigen::VectorXd vectorize_eigen(Eigen::MatrixXd x);
RcppExport SEXP _bvhar_vectorize_eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorize_eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// compute_eigenvalues
Eigen::VectorXd compute_eigenvalues(Eigen::Map<Eigen::MatrixXd> x);
RcppExport SEXP _bvhar_compute_eigenvalues(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_eigenvalues(x));
    return rcpp_result_gen;
END_RCPP
}
// qr_eigen
Rcpp::List qr_eigen(Eigen::Map<Eigen::MatrixXd> x);
RcppExport SEXP _bvhar_qr_eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(qr_eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// mgammafn
double mgammafn(double x, int p);
RcppExport SEXP _bvhar_mgammafn(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mgammafn(x, p));
    return rcpp_result_gen;
END_RCPP
}
// log_mgammafn
double log_mgammafn(double x, int p);
RcppExport SEXP _bvhar_log_mgammafn(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(log_mgammafn(x, p));
    return rcpp_result_gen;
END_RCPP
}
// sim_var
Eigen::MatrixXd sim_var(int num_sim, int num_burn, Eigen::MatrixXd var_coef, int var_lag, Eigen::MatrixXd sig_error, Eigen::MatrixXd init);
RcppExport SEXP _bvhar_sim_var(SEXP num_simSEXP, SEXP num_burnSEXP, SEXP var_coefSEXP, SEXP var_lagSEXP, SEXP sig_errorSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_sim(num_simSEXP);
    Rcpp::traits::input_parameter< int >::type num_burn(num_burnSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type var_coef(var_coefSEXP);
    Rcpp::traits::input_parameter< int >::type var_lag(var_lagSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sig_error(sig_errorSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_var(num_sim, num_burn, var_coef, var_lag, sig_error, init));
    return rcpp_result_gen;
END_RCPP
}
// sim_vhar
Eigen::MatrixXd sim_vhar(int num_sim, int num_burn, Eigen::MatrixXd vhar_coef, Eigen::MatrixXd sig_error, Eigen::MatrixXd init);
RcppExport SEXP _bvhar_sim_vhar(SEXP num_simSEXP, SEXP num_burnSEXP, SEXP vhar_coefSEXP, SEXP sig_errorSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_sim(num_simSEXP);
    Rcpp::traits::input_parameter< int >::type num_burn(num_burnSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type vhar_coef(vhar_coefSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sig_error(sig_errorSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_vhar(num_sim, num_burn, vhar_coef, sig_error, init));
    return rcpp_result_gen;
END_RCPP
}
// logml_stable
double logml_stable(Rcpp::List object);
RcppExport SEXP _bvhar_logml_stable(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(logml_stable(object));
    return rcpp_result_gen;
END_RCPP
}
// compute_aic
double compute_aic(Rcpp::List object);
RcppExport SEXP _bvhar_compute_aic(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_aic(object));
    return rcpp_result_gen;
END_RCPP
}
// compute_bic
double compute_bic(Rcpp::List object);
RcppExport SEXP _bvhar_compute_bic(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_bic(object));
    return rcpp_result_gen;
END_RCPP
}
// compute_hq
double compute_hq(Rcpp::List object);
RcppExport SEXP _bvhar_compute_hq(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_hq(object));
    return rcpp_result_gen;
END_RCPP
}
// compute_fpe
double compute_fpe(Rcpp::List object);
RcppExport SEXP _bvhar_compute_fpe(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_fpe(object));
    return rcpp_result_gen;
END_RCPP
}
// tune_var
Eigen::MatrixXd tune_var(Eigen::MatrixXd y, int lag_max, bool include_mean);
RcppExport SEXP _bvhar_tune_var(SEXP ySEXP, SEXP lag_maxSEXP, SEXP include_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_var(y, lag_max, include_mean));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bvhar_build_y0", (DL_FUNC) &_bvhar_build_y0, 3},
    {"_bvhar_build_design", (DL_FUNC) &_bvhar_build_design, 2},
    {"_bvhar_diag_misc", (DL_FUNC) &_bvhar_diag_misc, 1},
    {"_bvhar_build_ydummy", (DL_FUNC) &_bvhar_build_ydummy, 6},
    {"_bvhar_build_xdummy", (DL_FUNC) &_bvhar_build_xdummy, 4},
    {"_bvhar_minnesota_prior", (DL_FUNC) &_bvhar_minnesota_prior, 2},
    {"_bvhar_estimate_bvar_mn", (DL_FUNC) &_bvhar_estimate_bvar_mn, 4},
    {"_bvhar_estimate_mn_flat", (DL_FUNC) &_bvhar_estimate_mn_flat, 3},
    {"_bvhar_ssvs_coef_prop", (DL_FUNC) &_bvhar_ssvs_coef_prop, 3},
    {"_bvhar_ssvs_coef", (DL_FUNC) &_bvhar_ssvs_coef, 4},
    {"_bvhar_ssvs_coef_latent", (DL_FUNC) &_bvhar_ssvs_coef_latent, 4},
    {"_bvhar_ssvs_cov_prop", (DL_FUNC) &_bvhar_ssvs_cov_prop, 4},
    {"_bvhar_ssvs_cov_diag", (DL_FUNC) &_bvhar_ssvs_cov_diag, 5},
    {"_bvhar_ssvs_cov_off", (DL_FUNC) &_bvhar_ssvs_cov_off, 4},
    {"_bvhar_build_symmat", (DL_FUNC) &_bvhar_build_symmat, 2},
    {"_bvhar_ssvs_cov_latent", (DL_FUNC) &_bvhar_ssvs_cov_latent, 4},
    {"_bvhar_estimate_bvar_ssvs", (DL_FUNC) &_bvhar_estimate_bvar_ssvs, 15},
    {"_bvhar_estimate_var", (DL_FUNC) &_bvhar_estimate_var, 2},
    {"_bvhar_compute_cov", (DL_FUNC) &_bvhar_compute_cov, 3},
    {"_bvhar_VARcoeftoVMA", (DL_FUNC) &_bvhar_VARcoeftoVMA, 3},
    {"_bvhar_VARtoVMA", (DL_FUNC) &_bvhar_VARtoVMA, 2},
    {"_bvhar_compute_covmse", (DL_FUNC) &_bvhar_compute_covmse, 2},
    {"_bvhar_scale_har", (DL_FUNC) &_bvhar_scale_har, 3},
    {"_bvhar_estimate_har", (DL_FUNC) &_bvhar_estimate_har, 2},
    {"_bvhar_estimate_har_none", (DL_FUNC) &_bvhar_estimate_har_none, 2},
    {"_bvhar_VHARcoeftoVMA", (DL_FUNC) &_bvhar_VHARcoeftoVMA, 3},
    {"_bvhar_VHARtoVMA", (DL_FUNC) &_bvhar_VHARtoVMA, 2},
    {"_bvhar_compute_covmse_har", (DL_FUNC) &_bvhar_compute_covmse_har, 2},
    {"_bvhar_forecast_bvar", (DL_FUNC) &_bvhar_forecast_bvar, 3},
    {"_bvhar_forecast_bvharmn", (DL_FUNC) &_bvhar_forecast_bvharmn, 3},
    {"_bvhar_expand_var", (DL_FUNC) &_bvhar_expand_var, 5},
    {"_bvhar_expand_vhar", (DL_FUNC) &_bvhar_expand_vhar, 4},
    {"_bvhar_expand_bvar", (DL_FUNC) &_bvhar_expand_bvar, 6},
    {"_bvhar_expand_bvarflat", (DL_FUNC) &_bvhar_expand_bvarflat, 6},
    {"_bvhar_expand_bvhar", (DL_FUNC) &_bvhar_expand_bvhar, 5},
    {"_bvhar_roll_var", (DL_FUNC) &_bvhar_roll_var, 5},
    {"_bvhar_roll_vhar", (DL_FUNC) &_bvhar_roll_vhar, 4},
    {"_bvhar_roll_bvar", (DL_FUNC) &_bvhar_roll_bvar, 6},
    {"_bvhar_roll_bvarflat", (DL_FUNC) &_bvhar_roll_bvarflat, 6},
    {"_bvhar_roll_bvhar", (DL_FUNC) &_bvhar_roll_bvhar, 5},
    {"_bvhar_forecast_var", (DL_FUNC) &_bvhar_forecast_var, 2},
    {"_bvhar_forecast_vhar", (DL_FUNC) &_bvhar_forecast_vhar, 2},
    {"_bvhar_sim_mgaussian", (DL_FUNC) &_bvhar_sim_mgaussian, 3},
    {"_bvhar_sim_matgaussian", (DL_FUNC) &_bvhar_sim_matgaussian, 3},
    {"_bvhar_sim_iw_tri", (DL_FUNC) &_bvhar_sim_iw_tri, 2},
    {"_bvhar_sim_iw", (DL_FUNC) &_bvhar_sim_iw, 2},
    {"_bvhar_sim_mniw", (DL_FUNC) &_bvhar_sim_mniw, 5},
    {"_bvhar_compute_stablemat", (DL_FUNC) &_bvhar_compute_stablemat, 1},
    {"_bvhar_compute_var_stablemat", (DL_FUNC) &_bvhar_compute_var_stablemat, 1},
    {"_bvhar_compute_vhar_stablemat", (DL_FUNC) &_bvhar_compute_vhar_stablemat, 1},
    {"_bvhar_kronecker_eigen", (DL_FUNC) &_bvhar_kronecker_eigen, 2},
    {"_bvhar_vectorize_eigen", (DL_FUNC) &_bvhar_vectorize_eigen, 1},
    {"_bvhar_compute_eigenvalues", (DL_FUNC) &_bvhar_compute_eigenvalues, 1},
    {"_bvhar_qr_eigen", (DL_FUNC) &_bvhar_qr_eigen, 1},
    {"_bvhar_mgammafn", (DL_FUNC) &_bvhar_mgammafn, 2},
    {"_bvhar_log_mgammafn", (DL_FUNC) &_bvhar_log_mgammafn, 2},
    {"_bvhar_sim_var", (DL_FUNC) &_bvhar_sim_var, 6},
    {"_bvhar_sim_vhar", (DL_FUNC) &_bvhar_sim_vhar, 5},
    {"_bvhar_logml_stable", (DL_FUNC) &_bvhar_logml_stable, 1},
    {"_bvhar_compute_aic", (DL_FUNC) &_bvhar_compute_aic, 1},
    {"_bvhar_compute_bic", (DL_FUNC) &_bvhar_compute_bic, 1},
    {"_bvhar_compute_hq", (DL_FUNC) &_bvhar_compute_hq, 1},
    {"_bvhar_compute_fpe", (DL_FUNC) &_bvhar_compute_fpe, 1},
    {"_bvhar_tune_var", (DL_FUNC) &_bvhar_tune_var, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bvhar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
